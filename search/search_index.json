{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the KiCad Sharepoint Documentation","text":"<p>Welcome to the LHRs KiCad Sharepoint! KiCad-Sharepoint contains the shared symbols, footprints, and design blocks used to develop our custom PCBs for our solar-powered vehicle. Additionally, this documentation contains helpful guides for setting up and using KiCad with our standardized design process. Any inaccurate or outright wrong information should be blamed on our Platform Lead, Lakshay Gupta. </p>"},{"location":"#where-to-start","title":"Where to Start","text":"<p>Install and set up KiCad according to these instructions. Before starting a PCB project, make sure to review our expectations for design standards and workflow. If you have any questions, don't hesitate to ask your leads. Happy building :)</p>"},{"location":"#how-to-use-kicad-sharepoint","title":"How to use KiCAD Sharepoint","text":"<p>In order to use KiCAD Sharepoint into your project you need to do these three things:</p> <ul> <li>Add KiCAD Sharepoint as a submodule, instructions can be found here</li> <li>Add KiCAD Sharepoint symbols to your symbol table, instructions can be found here in the symbol table section</li> <li>Add KiCAD Sharepoint footprints to your footprint table, instructions can be found here</li> </ul>"},{"location":"#contributing-to-the-docs","title":"Contributing to the docs","text":""},{"location":"#installing-python-dependencies","title":"Installing python dependencies","text":"<p>We use <code>mkdocs</code> to host our documentation, which requires several python packages. In your terminal and home directory of KiCAD-Sharepoint, run:</p> <pre><code>python3 -m venv .venv\nsource .venv/bin/activate\npip install -r requirements.txt\n</code></pre> <p>You only need to do this once to install the needed dependencies, after that you can run </p> <pre><code>source .venv/bin/activate\n</code></pre> <p>to enter your virtual environment.</p>"},{"location":"#viewing-the-docs","title":"Viewing the docs","text":"<p>While in your python virtual environment (after running <code>source .venv/bin/activate</code>), run:</p> <pre><code>mkdocs serve\n</code></pre> <p>From there, mkdocs will host a preview of the documentation on a local port, usually <code>http://127.0.0.1:8000/</code>. The specific link can be found where it says \"Serving on\"</p>"},{"location":"#deplying-the-documentation","title":"Deplying the documentation","text":""},{"location":"#deploying-the-documentation","title":"Deploying the documentation","text":"<p>To deploy your changes to main KiCad-Sharepoint site, push your changes to the main branch (through a pull request), which will run a github workflow to deploy the docs to our site. For test viewing your changes the best way to do it is to build and serve the docs</p> <pre><code>mkdocs build\nmkdocs serve\n</code></pre>"},{"location":"Assembly/","title":"PCB Assembly","text":""},{"location":"Assembly/#how-to-design-for-assembly","title":"How to Design for Assembly","text":"<p>TODO DFM type shi</p>"},{"location":"Assembly/#jlc-assembly-tutorial","title":"JLC Assembly Tutorial","text":"<p>TODO take through website. clarify ambiguous stuff</p>"},{"location":"Assembly/#common-pcba-pitfalls","title":"Common PCBA Pitfalls","text":"<p>TODO things i ran into that could fuck up assembly</p>"},{"location":"Assembly/#cost-reduction","title":"Cost Reduction","text":"<p>TODO how to bs ur way to low-cost assembly</p>"},{"location":"Blocks/","title":"Design Blocks","text":"<p>TODO</p> <ul> <li>every design block documented here</li> <li>script to pull docs from each block folder</li> </ul>"},{"location":"Export/","title":"Exporting Designs","text":"<p>TODO</p> <ul> <li>using our docs jobset + how to make new ones</li> <li>renders</li> <li>idk what else</li> </ul>"},{"location":"KiCad-Setup/","title":"KiCad Setup","text":""},{"location":"KiCad-Setup/#kicad-installation","title":"KiCad Installation","text":"<p>For the 2025-2026 design cycle, LHRs Electrical members will use KiCad 9. Download the latest stable version here. </p>"},{"location":"KiCad-Setup/#required-plugins","title":"Required Plugins","text":"<p>There are a few plugins we use that aid in day-to-day development and will make your life a lot easier. You can access the Plugin and Content Manager (PCM) from the KiCad home screen as shown below.</p> <p></p>"},{"location":"KiCad-Setup/#interactive-html-bom-ibom","title":"Interactive HTML BOM (IBOM)","text":"<p>This allows you to generate a convenient Bill of Materials (BOM) listing with the ability to visually correlate and easily search for components and their placements on the PCB. It's useful when hand-soldering boards, since you can quickly find the location of each component you're placing. Install from the PCM as shown below. Make sure to click \"Apply Pending Changes.\"</p> <p></p> <p>Once installed, you can launch the IBOM tool from pcbnew by clicking this icon in the top bar.</p> <p></p> <p>Then modify any relevant settings and generate the IBOM. By default, it will be saved in your project directory as <code>ibom.html</code>.</p> <p></p>"},{"location":"KiCad-Setup/#kicad-jlcpcb-tools","title":"KiCAD JLCPCB Tools","text":"<p>This plugin is very useful for working with our PCBA fab, JLCPCB. It allows for one-click generation of gerbers, BOM, and CPL (component placement list) files, along with assigning LCSC (JLC supplier) parts for assembly.</p> <p>Install this plugin by following the directions on Github.</p> <p>Once installed, you can launch the JLCPCB tool from pcbnew by clicking this icon in the top bar.</p> <p></p> <p>To assign LCSC part numbers, simply select a part from the list, click \"Select alike parts\" in the right sidebar and then \"Assign LCSC number.\" Then you can search for the LCSC number (or use this website for easy parametric search).</p> <p>Now to generate production files simply click the generate button. The files will be located in the <code>jlcpcb/production_files</code> folder within your project directory.</p> <p></p>"},{"location":"Ordering/","title":"JLC Ordering","text":"<p>To start a PCB prototype order, go to JLCPCB and sign in to the LHR Solar account. Ask a lead if you need login info. Then upload your gerber zip file as shown below.</p> <p></p> <p>You should see an order page like this. Check that the base material is FR-4 for rigid boards and that the layer count and dimensions match your design in KiCad.</p> <p></p> <p>For PCB Specifications, keep the default values for everything unless you need to change a certain option.</p> <p></p> <p>After modifying relevant specifications, click \"Save To Cart\" and proceed to checkout.</p>"},{"location":"Parts/","title":"Common Parts","text":"<p>TODO</p> <ul> <li>add common parts that require additional docs + usage guidelines</li> <li>maybe standard connector pinouts and stuff as well</li> <li>SOMs</li> </ul>"},{"location":"Standards/","title":"Standards","text":"<p>To ensure consistency throughout the team's hardware, there are a few standards to follow when contributing to the shared libraries and working on your design projects.</p>"},{"location":"Standards/#naming-convention","title":"Naming Convention","text":"<p>All Github repositories for PCBs should be named as follows: <code>{System}-{BoardName}PCB</code>. Some examples would be:</p> <ul> <li><code>PS-ThermistorCollectorPCB</code></li> <li><code>PS-PowerDistributionUnitPCB</code></li> <li><code>VCAT-DashboardPCB</code></li> </ul>"},{"location":"Standards/#symbols","title":"Symbols","text":"<p>All symbols must have the following fields populated to be merged into our shared libraries or used in an LHRs schematic.</p> Field Purpose Reference Type of component Value Component value (resistance, capacitance, etc.) Footprint Footprint library &amp; name (should be linked) Datasheet Link to the manufacturer's datasheet Description Summary of the component's functionality P/N Manufacturer's part number <p>Example symbol fields would look something like this: </p> <p>Additionally, symbol pins should be grouped intuitively as shown and assigned the proper functionality (power, input, output, etc.). Please double check that the pins &amp; pin numbers actually match the package shown on the datasheet. </p>"},{"location":"Standards/#footprints","title":"Footprints","text":"<p>Ensure the following for all footprints:</p> <ul> <li>Footprints should match the datasheet. Please double-check</li> <li>All pins should correspond to the schematic</li> <li>Pin 1 should be clearly labeled in silkscreen</li> <li>Footprints should have accurate 3D models attached as embedded files</li> <li>Courtyards should be defined such that the soldered component won't interfere with any others</li> </ul>"},{"location":"Standards/#embedding-3d-models","title":"Embedding 3D Models","text":"<p>Open the footprint properties by hovering over a footprint and using the 'e' hotkey. Then navigate to the Embedded Files tab. </p> <p>Now add the embedded file by clicking the file icon. You can usually find the step file by searching the component part number on SnapMagic. </p> <p>Copy the reference to the embedded file as shown (double-click and ctrl-c). </p> <p>Finally, add the 3D Model by pasting the embedded reference in the 3D Models tab. Modify the Scale, Rotation, and Offset until the chip lines up properly with the pads. Ensure pin 1 of the model lines up with pin 1 of the footprint. If the model doesn't show up, close and reopen the footprint properties window to refresh. </p>"},{"location":"Workflow/","title":"PCB Design Workflow","text":""},{"location":"Workflow/#overview","title":"Overview","text":"<p>We follow this workflow when designing PCBs for the car. Sticking to this will help you develop hardware smoothly while learning a lot in the process.</p>"},{"location":"Workflow/#timeline","title":"Timeline","text":"<p>Each step of the PCB design process should take approximately this much time (including reviews). Your timeline may vary based on board complexity and overall deadlines, and you'll get faster at iterating as you learn more, but try not to deviate too much from this.</p> <ul> <li>Requirements &amp; Setup - 1 day</li> <li>Schematic &amp; Part Selection - 1-2 weeks</li> <li>Layout &amp; Routing - 2 weeks</li> <li>Production Files &amp; Documentation - 1 day</li> </ul> <p>The goal of this timeline is to ensure you have some kind of reviewable progress weekly. If you're blocked by another system/dependency, make sure they're aware so you can continue working. Don't be afraid to ask for reviews/help often to stay on track, that's what we're here for :P</p>"},{"location":"Workflow/#project-setup","title":"Project Setup","text":"<p>Follow these steps to set up a new hardware project.</p>"},{"location":"Workflow/#github-repo-setup","title":"Github Repo Setup","text":"<p>First, ask your lead to create a Github repository to store all your project files. If they don't follow the naming convention, they have to pay for your food next workday. Clone the repository using SSH and add our pull request (PR) template to the main directory. Also add a file called <code>.gitignore</code> with these contents so git knows to ignore backup/temporary files. Open your terminal and use git to add, commit, and push these files to main. Now, whenever you create a PR, the template checklist will show up for you to fill out. Finally create and switch to a branch called \"RevA\" using the command <code>git switch -c RevA</code>. You'll do all your work for the first revision of your board on this branch.</p>"},{"location":"Workflow/#shared-libraries","title":"Shared Libraries","text":"<p>We share several parts between our team's PCBs, including ICs, diodes, and more. This saves us from having to duplicate common symbols and footprints across projects, allowing for a single source of truth. These shared libraries can be found in KiCAD-Sharepoint.</p> <p>To add the shared libraries to your project, open your repository in the terminal and type <code>git submodule add git@github.com:lhr-solar/KiCAD-Sharepoint.git</code>. In the next step, you'll find out how to associate these with your KiCad project.</p> <p>Note: if you're cloning a repository that already has KiCAD-Sharepoint added, you need to run <code>git submodule update --init --recursive</code> to pull the shared libraries.</p>"},{"location":"Workflow/#creating-a-kicad-project","title":"Creating a KiCad Project","text":"<p>Now open KiCad and create a new project (Ctrl-N). Choose your repository folder and name the KiCad project the same as your repository name. Important: KiCad puts all your files inside another folder, so close KiCad and move these files into the main directory as shown. Finally, delete the folder KiCad created. </p> <p></p>"},{"location":"Workflow/#documentation","title":"Documentation","text":"<p>We all ~~hate~~ love documentation! To that end, we document all LHRs electrical projects using Confluence. For example, all Power Systems documentation can be found here. Create a new Confluence page for your board and place it under the correct system/subsystem folder. As you work on your design, fill out this template with your requirements, schematic/layout notes, firmware info, etc.</p> <p>In addition to your Confluence page, ensure your Github repository has a <code>Readme.md</code> file with relevant information about your project. This can simply be your name, project description, images of the schematic/pcb, and a brief application note. Please also link your Confluence documentation here.</p>"},{"location":"Workflow/#schematic","title":"Schematic","text":""},{"location":"Workflow/#symbol-table","title":"Symbol Table","text":"<p>In order for your schematic to use the KiCAD-Sharepoint symbols, you need to add the symbol libraries to your schematic's symbol table, which defines the locations of all your symbols. Symbol libaries are stored in '.kicad_sym' files</p> <ul> <li>Open your schematic file from your KiCAD project</li> <li>Go to Preferences -&gt; Manage Symbol Libraries -&gt; Project Specific Libraries</li> <li>Press the + sign at the bottom</li> <li>In Library Path press the folder button add one of the .kicad_sym files in the KiCAD-Sharepoint submodule</li> <li>Set the nickname to be whatever is in the front of the .kicad_sym file, i.e if it's called <code>utsvt_connectors.kicad_sym</code>, make the nickname <code>utsvt_connectors</code>. </li> <li>Keep in mind that other people should be able to open your KiCAD-Project without the libraries being broken. So if the library path is <code>users/lakshay</code> then that link will be broken since they prolly don't have that path. All of your library paths should be relative to the KiCAD project, which KiCAD has that path stored in this variable: <code>${KIPRJMOD}</code></li> <li>Repeat these steps for the other .kicad_sym files in KiCAD-Sharepoint.  </li> </ul> <p>Once you start adding your own symbol libraries for your board, you also need to add that .kicad_sym to the the symbol table.</p> <p>This is what a finalized symbol table should look like:  Note that all of the paths use <code>${KIPRJMOD}</code>, so every path is relative to where the KiCAD Project is stored, which changes depending on the user.</p>"},{"location":"Workflow/#heirarchical-design","title":"Heirarchical Design","text":""},{"location":"Workflow/#electrical-rules-check","title":"Electrical Rules Check","text":"<p>Before moving onto layout, make sure to run the Electrical Rules Checker (ERC). The ERC checks your schematic to see if anything is unconnected, or not following any of KiCAD's rules. This doesn't check electrical functionality, that's up to you :) </p> <p>To run an ERC go to Inspect -&gt; Electrical Rules Checker -&gt; Run ERC.  Some errors you can ignore like \"output pin not driven by inputs\", but usually it's better to just leave them and ask someone else to check your errors to see if they're actual errors as a sanity check. Once you're 100% sure those errors aren't actually errors you can right click the error and press \"Exclude Violation\". After you run the ERC it leaves all of the markers there to indicate where the ERC error or warning is, if that gets annoying you can just press Delete All Markers in the ERC menu.</p>"},{"location":"Workflow/#part-selection","title":"Part Selection","text":""},{"location":"Workflow/#standardized-components","title":"Standardized Components","text":"<p>When selecting components, it's always preferable to pick a component from our Standardized Passive Components list since this includes components we've bought before, have inventory of, or have proven worked before.  Do this before selecting footprints Select footprints TODO</p>"},{"location":"Workflow/#layout-routing","title":"Layout &amp; Routing","text":"<p>Put stuff on board Edge cuts Mounting Planes/Stackup TODO</p>"},{"location":"Workflow/#pcb-constraints","title":"PCB Constraints","text":"<p>When manufacturing a PCB, there are constraints that are given to us by the manufacturer based on how precise their manufacturing equipment is. The following are JLCPCB Manufacturing Capabilities. When creating the layout of your board, select File -&gt; Board Setup -&gt; Constraints and set them to the following values:</p> <ul> <li>Minimum Clearance (2 layer): .127mm</li> <li>Minimum Track Width (2 layer): .127mm</li> <li>Minimum Clearance (4 layer): .09mm</li> <li>Minimum Track Width (4 layer): .09mm</li> <li>Minimum Connection Width: 0mm</li> <li>Minimum Annular Width: .13mm</li> <li>Minimum Via Diameter (2 layer): .5mm</li> <li>Minimum Via Diameter (4 layer): .25mm</li> <li>Copper to Hole Clearance: .254mm</li> <li>Copper to Edge Clearance: .3mm</li> <li>Minimum Through Hole: .3mm</li> <li>Hole to Hole Clearance: .5mm</li> <li>Minimum Item Clearance: .15mm</li> </ul>"},{"location":"Workflow/#review-process","title":"Review Process","text":"<p>PCB reviews are handled through Github pull requests. To create a PR, follow these steps. The PR template should automatically show up, with a checklist to fill out to make sure your PCB is up to standards. Assign reviewers using the sidebar as shown - make sure to assign at least 2 or 3 reviewers (usually your lead/sublead but can be any experienced member). Also ensure you're listed as the assignee for the PR.</p> <p></p> <p>Now copy the Github link to your PR and send it in the <code>#review-request</code> channel on Slack. Mention the reviewers you requested, and feel free to bug them if they don't respond/review in the next couple of days. To keep the review process quick, you should aim to respond to review comments as fast as possible, but make sure you understand what the reviewers are saying. If you're confused about a concept or technical detail, don't hesitate to ask (as a Github reply). It's always better to ask than to take feedback blindly :)</p>"},{"location":"Workflow/#generating-production-files","title":"Generating Production Files","text":"<p>When your schematic and layout have been approved, there's one last step before ordering it - generating production files. These files tell the fabrication house how to actually cut the board edges, drill vias, and deposit copper onto the board. To generate production files for JLC (Gerbers, BOM, and CPL), use the JLCPCB Tools plugin as described here.</p>"},{"location":"Workflow/#ordering","title":"Ordering","text":"<p>Follow the ordering instructions to order your PCB prototype using JLCPCB. Usually we order in a couple of batches per revision cycle, so reach out to your lead to confirm your order timeline (you may need to speed up development to hit these dates).</p>"}]}